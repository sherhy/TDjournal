#!/usr/bin/env python3
import os
import re
import sys
import argparse
from datetime import datetime

# TODO: calendar view, like a calendar app
#   an idea is to make neat button DOMs after file names.
#   use shelve for local db of current files, and render from that db
#   Some shelve module, and sort into monthly buckets, create link DOM
#   for each filename in bucket
TODAY = datetime.now()
PRJ_DIR = '/Users/jjeong/TDjournal/td/'


def ordinal(monthDay):
    ordInd = ["th", "st", "nd", "rd"]

    if monthDay % 10 in [1, 2, 3] and monthDay not in [11, 12, 13]:
        return ordInd[monthDay % 10]
    else:
        return ordInd[0]


def get_file_dates():
    filenums = set()
    for file in os.listdir(PRJ_DIR):
        filename = os.fsdecode(file)
        if filename.endswith(".md"):
            try:
                filenums.add(int(re.search(r'[0-9]+', filename).group()))
            except Exception:
                continue
    return filenums


def get_todays_md():
    latest_md = f"td{latest}.md"
    with open(f"{PRJ_DIR}{latest_md}") as f:
        firstline = f.readline()

    if re.findall(r'(\d+)', firstline)[1] == TODAY.strftime("%Y%m%d"):
        print(f"{latest_md} already exists")
        return latest_md
    return None


def retrieve_tasks():
    latest_md = f"td{latest}.md"
    with open(f"{PRJ_DIR}{latest_md}") as f:
        firstline = f.readline()
        theRest = f.read()

    newFirstline = firstline[:-13] + TODAY.strftime("%Y%m%d") + ".md)\n"

    with open(f"{PRJ_DIR}{latest_md}", "w") as f:
        f.write(newFirstline)
        f.write(theRest)

    return '\n'.join(
        re.findall(r'(\- \[ \] .+)', theRest)
    )


def make_new_md():
    today = TODAY.strftime("%Y%m%d")
    firstline = f'[<-](./td{latest}.md) {today} [->](./td{today}.md)'

    # TODO: modify latest post's top line to link to today
    # copy tasks from previous entry
    tasks = retrieve_tasks()

    template = f"""
---
#### Yesterday:
###### What did I learn?

###### What did I read?

###### What did I do to help my future?

#### Now:

#### Today ({TODAY.strftime("%A")}):
###### Events:

###### Outcomes, Goals, Questions:
{tasks}

###### Accomplishments:

"""
    # date header
    date = int(TODAY.strftime('%-d'))
    footer = f'<title>\n    Todo | {TODAY.strftime("%B")} \
    {date}{ordinal(date)}\n</title>'

    # create file
    newMD = f'td{TODAY.strftime("%Y%m%d")}.md'
    with open(f"{PRJ_DIR}{newMD}", 'w+') as f:
        f.write(firstline)
        f.write(template)
        f.write(footer)

    print(f"{newMD} created")
    return newMD


def open_with_editor(editor, filename):
    print(f"opening {filename}")
    os.system(f"{editor} {PRJ_DIR}{filename}")


if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument('-n', '--new', action='store_true', help="can choose editor")
    p.add_argument('-e', '--edit', action='store_true', help="can choose editor")
    p.add_argument('-p', '--edit-previous', action='store_true', help="can choose editor")
    p.add_argument('-v', '--view', action='store_true', help="view from chrome")
    p.add_argument('-s', '--sublime', action='store_true', help="open with sublime, default editor is vi")
    p.add_argument('-l', '--list', action='store_true', help="list")
    p.add_argument('n', type=int, nargs="?", default=5, help="limit")
    args = p.parse_args()

    file_numbers = get_file_dates()
    latest = max(file_numbers)
    editor = "subl" if args.sublime else "vi"

    if args.list:
        for number in sorted(list(file_numbers))[-args.n:]:
            print(f"{PRJ_DIR}td{number}.md")
        sys.exit(0)

    todays_md = get_todays_md()
    if args.edit:
        open_with_editor(editor, f"td{latest}.md")
    elif args.edit_previous:
        previous = sorted(list(file_numbers))[-2]
        open_with_editor(editor, f"td{previous}.md")
    elif args.view:
        open_with_editor('open -a "Google Chrome"', f"td{latest}.md")
    else:  # args.new
        file_name = make_new_md() if todays_md is None else todays_md
        open_with_editor(editor, file_name)
